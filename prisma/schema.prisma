datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
    provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  password       String
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  memories       Memory[]
  likes          Like[]
  comments       Comment[]
  commentReactions CommentReaction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Memory {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  date        DateTime
  location    String
  category    String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  friends     FriendTag[]
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FriendTag {
  id       String  @id @default(cuid())
  name     String
  memory   Memory  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  memoryId String
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  memoryId  String
  createdAt DateTime @default(now())

  @@unique([userId, memoryId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  memoryId  String
  createdAt DateTime @default(now())
  parentId  String?  // For threaded replies
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  reactions CommentReaction[]
}

model CommentReaction {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}